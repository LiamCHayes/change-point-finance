class(sector.df.timeFrame[1])
class(as.data.frame(sector.df.timeFrame[1]))
as.data.frame(sector.df.timeFrame[1])
as.data.frame(sector.df.timeFrame[1]$Date)
dim(as.data.frame(sector.df.timeFrame[1]))
as.data.frame(sector.df.timeFrame[1][1])
test <- as.data.frame(sector.df.timeFrame[1])
test$Date
test <- as.data.frame(sector.df.timeFrame[1])
class(sector.df.timeFrame[1])
filter?
?filter
sector.df.timeFrame <- list(as.data.frame(sector.df.timeFrame))
sector.df.timeFrame <-
lapply(sector.df, function(x) {
filter(x, Date > as.Date("06/20/2011", "%m/%d/%Y"),
Date < as.Date("10/24/2011", "%m/%d/%Y")
)
})
sector.df.timeFrame <- lapply(sector.df.timeFrame, function(x) as.data.frame(x))
sector.df.timeFrame[1]$Date
sector.df.timeFrame <-
lapply(sector.df, function(x) {
filter(x, Date > as.Date("06/20/2011", "%m/%d/%Y"),
Date < as.Date("10/24/2011", "%m/%d/%Y")
)
})
sector.df.timeFrame[1][1]$Date
sector.df.timeFrame[1][1]
sector.df.timeFrame[1][1][1]
sector.df.timeFrame
sector.df.timeFrame[9]
sector.df.timeFrame[1]
class(sector.df.timeFrame[1])
class(sector.df.timeFrame)
sector.df.timeFrame[1]$data.frame$Date
sector.df.timeFrame[1]$data.frame
sector.df.timeFrame$data.frame
sector.df.timeFrame[[1]]
sector.df.timeFrame[[1]]$Date
tradingDays <- as.factor(sector.df.timeFrame[[1]]$Date)
tradingDays <- as.Date(as.factor(sector.df.timeFrame[[1]]$Date), "%m%d%Y")
tradingDays <- as.Date(as.character(sector.df.timeFrame[[1]]$Date), "%m%d%Y")
tradingDays <- as.Date(as.character(sector.df.timeFrame[[1]]$Date), "%m%d%Y")
tradingDays <- as.character(sector.df.timeFrame[[1]]$Date)
for (day in tradingDays) {
print(day)
}
# Pick a time frame to test for a change (06/20/2011 - 10/24/2011)
sector.df <- list(xlb.r, xle.r, xlf.r, xli.r, xlk.r, xlp.r, xlu.r, xlv.r, xly.r)
sector.df.timeFrame <-
lapply(sector.df, function(x) {
mutate(x, Date = as.Date(Date, "%m/%d/%Y"))
})
sector.df.timeFrame <-
lapply(sector.df, function(x) {
filter(x, Date > as.Date("06/20/2011", "%m/%d/%Y"),
Date < as.Date("10/24/2011", "%m/%d/%Y")
)
})
tradingDays <- as.character(sector.df.timeFrame[[1]]$Date)
sector.df.timeFrame <-
lapply(sector.df.timeFrame, function(x) {
filter(x, Date > as.Date("06/20/2011", "%m/%d/%Y"),
Date < as.Date("10/24/2011", "%m/%d/%Y")
)
})
tradingDays <- as.character(sector.df.timeFrame[[1]]$Date)
# Pick a time frame to test for a change (06/20/2011 - 10/24/2011)
sector.df <- list(xlb.r, xle.r, xlf.r, xli.r, xlk.r, xlp.r, xlu.r, xlv.r, xly.r)
sector.df.timeFrame <-
lapply(sector.df, function(x) {
mutate(x, Date = as.Date(Date, "%m/%d/%Y"))
})
sector.df.timeFrame <-
lapply(sector.df.timeFrame, function(x) {
filter(x, Date > as.Date("06/20/2011", "%m/%d/%Y"),
Date < as.Date("10/24/2011", "%m/%d/%Y")
)
})
tradingDays <- as.character(sector.df.timeFrame[[1]]$Date)
?quantile
lapply(sector.df, kdeVector, dateString=day, CIDR=F)
# helper functions
getReturns <- function(df) {
returns <- rep(0, dim(df)[1])
for (i in 2:dim(df)[1]) {
returns[i] <- (df$close[i] - df$close[i-1])/df$close[i-1]
}
df$computedRet <- returns
return(df)
}
test <- getReturns(xly.r)
plot(test$computedRet)
sector.df <- lapply(sector.df, getReturns)
sector.df.timeFrame <-
lapply(sector.df, function(x) {
mutate(x, Date = as.Date(Date, "%m/%d/%Y"))
})
sector.df.timeFrame <-
lapply(sector.df.timeFrame, function(x) {
filter(x, Date > as.Date("06/20/2011", "%m/%d/%Y"),
Date < as.Date("10/24/2011", "%m/%d/%Y")
)
})
tradingDays <- as.character(sector.df.timeFrame[[1]]$Date)
lapply(sector.df, kdeVector, dateString=day, CIDR=F)
lapply(sector.df[], kdeVector, dateString=day, CIDR=F)
lapply(sector.df[[]], kdeVector, dateString=day, CIDR=F)
lapply(sector.df[[1:9]], kdeVector, dateString=day, CIDR=F)
lapply(sector.df[[1]], kdeVector, dateString=day, CIDR=F)
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
kdeVector(tradingDays[1], sector.df[[1]], CIDR=T)
sector.df[[1]]
class(sector.df[[1]])
kdeVector(tradingDays[1], sector.df[[1]], CIDR=T)
tradingDays[1]
kdeVector(tradingDays[2], sector.df[[1]], CIDR=T)
kdeVector(tradingDays[3], sector.df[[1]], CIDR=T)
test <- sector.df[[1]]
kdeVector(tradingDays[3], test, CIDR=T)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == as.Date(dateString, "%m%d%Y")) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
returns <- rep(0, dim(df)[1])
for (i in 2:dim(df)[1]) {
returns[i] <- (df$close[i] - df$close[i-1])/df$close[i-1]
}
df$computedRet <- returns
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
kdeVector(tradingDays[3], sector.df[[1]], CIDR=T)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == dateString) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
returns <- rep(0, dim(df)[1])
for (i in 2:dim(df)[1]) {
returns[i] <- (df$close[i] - df$close[i-1])/df$close[i-1]
}
df$computedRet <- returns
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
for (day in tradingDays) {
lapply(sector.df, kdeVector, dateString=day, CIDR=F)
}
lapply(sector.df, kdeVector, dateString=tradingDays[1], CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == dateString) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
lapply(sector.df, kdeVector, dateString=tradingDays[1], CIDR=F)
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
print(dim(df))
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == dateString) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
sector.df[[1]]
dim(sector.df[[1]])
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == as.factor(dateString)) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
for (day in tradingDays) {
lapply(sector.df, kdeVector, dateString=day, CIDR=F)
}
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == as.factor(dateString)) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == dateString) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == dateString) %>%
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
df <- sectorDF %>%
filter(Date == dateString)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == dateString)
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
kdeVector(tradingDays[1], sector.df[[1]], CIDR=F)
sector.df[[1]]$Date
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
lapply(sector.df, kdeVector, dateString=day, CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == dateString) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
lapply(sector.df, kdeVector, dateString=day, CIDR=F)
# Pick a time frame to test for a change (06/20/2011 - 10/24/2011)
sector.df <- list(xlb.r, xle.r, xlf.r, xli.r, xlk.r, xlp.r, xlu.r, xlv.r, xly.r)
sector.df <- lapply(sector.df, getReturns)
sector.df <-
lapply(sector.df, function(x) {
mutate(x, Date = as.Date(Date, "%m/%d/%Y"))
})
sector.df.timeFrame <-
lapply(sector.df, function(x) {
filter(x, Date > as.Date("06/20/2011", "%m/%d/%Y"),
Date < as.Date("10/24/2011", "%m/%d/%Y")
)
})
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == as.Date(dateString, "%m%d%Y")) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
lapply(sector.df, kdeVector, dateString=day, CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0") %>%
filter(Date == as.Date(dateString, "%m%d%Y"))
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
lapply(sector.df, kdeVector, dateString=day, CIDR=F)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
lapply(sector.df, kdeVector, dateString=day, CIDR=F)
df <- sectorDF %>%
filter(Date == as.Date(dateString, "%m%d%Y")) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
df <- sector.df[[1]] %>%
filter(Date == as.Date(dateString, "%m%d%Y")) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
df <- sector.df[[1]] %>%
filter(Date == as.Date(day, "%m%d%Y")) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
tradingDays <- as.character(sector.df.timeFrame[[1]]$Date)
tradingDays <- as.character(as.factor(sector.df.timeFrame[[1]]$Date))
tradingDays <- as.character(as.factor(sector.df.timeFrame[[1]]$Date))
