avgMLEsigmasq <- mean(MLEsigmasq)
covariance <- cov(theta)
library(tidyverse)
library(knitr)
nsim <- 1000
mu <- 1
sigmasq <- 2
n <- 20
MLEmu <- rep(0, nsim)
MLEsigmasq <- rep(0, nsim)
for (i in 1:nsim) {
sample <- rnorm(n, mu, sqrt(sigmasq))
MLEmu[i] <- mean(sample)
MLEsigmasq[i] <- sum((sample - MLEmu[i])**2)/n
}
theta <- data.frame(mu=MLEmu, sigmasq=MLEsigmasq)
avgMLEmu <- mean(MLEmu)
avgMLEsigmasq <- mean(MLEsigmasq)
covariance <- cov(theta)
avgMLEsigmasq/n
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(RMySQL)
library(tidyverse)
library(knitr)
library(kableExtra)
library(cowplot)
# Connect to database
health <- dbConnect(MySQL(),
db='health',
host='localhost',
user='root',
password='l4mlnMySQL')
# Get glucose data
rs <- dbSendQuery(health, 'SELECT * FROM glucose;')
glucose <- fetch(rs, n=-1)
glucose <- glucose %>% mutate(reading_date=as.Date(reading_date))
# Get training data
rs <- dbSendQuery(health, 'SELECT * FROM training;')
training <- fetch(rs, n=-1)
training <- training %>% mutate(log_date=as.Date(log_date))
# Get lookup tables
rs <- dbSendQuery(health, 'SELECT * FROM l_training_focus;')
l_highest_vol <- fetch(rs, n=-1)
getHVolume <- l_highest_vol$training_focus
names(getHVolume) <- l_highest_vol$training_focus_id
rs <- dbSendQuery(health, 'SELECT * FROM l_injury_status;')
l_injury_status <- fetch(rs, n=-1)
getInjuryStatus <- l_injury_status$injury_status
names(getInjuryStatus) <- l_injury_status$injury_status_id
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(RMySQL)
library(tidyverse)
library(knitr)
library(kableExtra)
library(cowplot)
# Connect to database
health <- dbConnect(MySQL(),
db='health',
host='localhost',
user='root',
password='l4mlnMySQL')
# Get glucose data
rs <- dbSendQuery(health, 'SELECT * FROM glucose;')
glucose <- fetch(rs, n=-1)
glucose <- glucose %>% mutate(reading_date=as.Date(reading_date))
# Get training data
rs <- dbSendQuery(health, 'SELECT * FROM training;')
training <- fetch(rs, n=-1)
training <- training %>% mutate(log_date=as.Date(log_date))
# Get lookup tables
rs <- dbSendQuery(health, 'SELECT * FROM l_training_focus;')
l_highest_vol <- fetch(rs, n=-1)
getHVolume <- l_highest_vol$training_focus
names(getHVolume) <- l_highest_vol$training_focus_id
rs <- dbSendQuery(health, 'SELECT * FROM l_injury_status;')
l_injury_status <- fetch(rs, n=-1)
getInjuryStatus <- l_injury_status$injury_status
names(getInjuryStatus) <- l_injury_status$injury_status_id
-0.9157+0.0052*(50)+0.0058*(182)+0.0122*(36)
exp(0.8391)
2.3143/(1+2.3143)
150/(150+442)
150/(150+58)
150/(150+118)
442/(442+58)
150/(150+118)
load("9ETFs.RData")
# Load packages
library(tidyverse)
library(ggplot2)
# Get data
setwd('C:/Users/lchco/OneDrive/Documents/School/CSU/Summer 2023/Week 1')
load("9ETFs.RData")
sectors <- c('xlb' = 'materials', 'xle' = 'energy', 'xlf' = 'financials',
'xli' = 'industrials', 'xlk' = 'technology', 'xlp' = 'consumer staples',
'xlu' = 'utilities', 'xlv' = 'health care', 'xly' = 'consumer discretionary')
## Technology sector explore with 10 minute returns
summary(xlk.r)
tech <- xlk %>% mutate(Time = Time/100) %>% filter(Time %% 10 == 0)
# Whole data set
techPlot <- ggplot(data=tech)
techPlot + geom_boxplot(aes(CIDR))
techPlot + geom_histogram(aes(CIDR), bins=500)
#techPlot + geom_point(aes(x=1:length(CIDR), y=CIDR))
# Calculate regular returns
techOct52005 <- xlk.r %>%
filter(Date == "10/5/2005") %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
returns <- rep(0, dim(techOct52005)[1])
for (i in 2:dim(techOct52005)[1]) {
returns[i] <- (techOct52005$close[i] - techOct52005$close[i-1])/techOct52005$close[i-1]
}
techOct52005$computedRet <- returns
techOct52005Plot <- ggplot(data = techOct52005)
# Plot returns
techOct52005Plot +
geom_histogram(aes(computedRet), bins=40) +
labs(title = "Histogram of Returns - XLK 10/5/2005", x = "Returns", y="") +
theme_bw()
techOct52005Plot +
geom_density(aes(computedRet)) +
labs(title = "KDE of Returns - XLK 10/5/2005", x = "Returns", y="") +
theme_bw()
# CIDR curve plot and replication
techOct52005Plot +
geom_point(aes(y=CIDR, x=1:length(CIDR))) +
labs(title="CIDR curve - XLK 10/5/2005", x="k")
CIDR_replication <- c(log(techOct52005$close) - log(techOct52005$close[1]))
ggplot() +
geom_point(aes(y=CIDR_replication, x=1:length(CIDR_replication))) +
labs(title="CIDR curve replication - XLK 10/5/2005", x="k")
# Different day, still tech
techDec302010 <- xlk.r %>%
filter(Date == "12/30/2010") %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
returns <- rep(0, dim(techDec302010)[1])
for (i in 2:dim(techDec302010)[1]) {
returns[i] <- (techDec302010$close[i] - techDec302010$close[i-1])/techDec302010$close[i-1]
}
techDec302010$computedRet <- returns
techDec302010Plot <- ggplot(data = techDec302010)
techDec302010Plot +
geom_histogram(aes(computedRet), bins=40) +
labs(title = "Histogram of Returns - XLK 12/30/2010", x = "Returns", y="") +
theme_bw()
techDec302010Plot +
geom_density(aes(computedRet)) +
labs(title = "KDE of Returns - XLK 12/30/2010", x = "Returns", y="") +
theme_bw()
## Create function to draw histogram and KDE given a date and sector dataframe (must be .r)
drawHistogram <- function(dateString, sectorDF, CIDR=T) {
d <- sectorDF %>%
filter(Date == dateString) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
returns <- rep(0, dim(d)[1])
for (i in 2:dim(d)[1]) {
returns[i] <- (d$close[i] - d$close[i-1])/d$close[i-1]
}
d$computedRet <- returns
dPlot <- ggplot(data = d)
if(CIDR) {
pl <- dPlot +
geom_histogram(aes(CIDR), bins=40) +
labs(title = paste("Histogram of CIDR - ", str_to_upper(substr(deparse(substitute(xlk.r)), 1, 3)), dateString), x = "Returns", y="") +
theme_bw()
}
else {
pl <- dPlot +
geom_histogram(aes(computedRet), bins=40) +
labs(title = paste("Histogram of Returns - ", str_to_upper(substr(deparse(substitute(xlk.r)), 1, 3)), dateString), x = "Returns", y="") +
theme_bw()
}
return(pl)
}
drawKDE <- function(dateString, sectorDF, CIDR=T) {
d <- sectorDF %>%
filter(Date == dateString) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
returns <- rep(0, dim(d)[1])
for (i in 2:dim(d)[1]) {
returns[i] <- (d$close[i] - d$close[i-1])/d$close[i-1]
}
d$computedRet <- returns
dPlot <- ggplot(data = d)
if (CIDR) {
pl <- dPlot +
geom_density(aes(CIDR)) +
labs(title = paste("KDE of CIDR - ", str_to_upper(substr(deparse(substitute(xlk.r)), 1, 3)), dateString), x = "Returns", y="") +
theme_bw()
}
else {
pl <- dPlot +
geom_density(aes(computedRet)) +
labs(title = paste("KDE of Returns - ", str_to_upper(substr(deparse(substitute(xlk.r)), 1, 3)), dateString), x = "Returns", y="") +
theme_bw()
}
return(pl)
}
## Plots
# draw histogram of returns
xlk_hist_returns <- drawHistogram("12/30/2010", xlk.r, CIDR = F)
xlk_hist_returns
# draw kde of returns
xlk_kde_returns <- drawKDE("12/30/2010", xlk.r, CIDR = F)
xlk_kde_returns
# draw histogram of CIDR
xlk_hist_CIDR <- drawHistogram("12/30/2010", xlk.r)
xlk_hist_CIDR
# draw kde of CIDR
xlk_kde_CIDR <- drawKDE("12/30/2010", xlk.r)
xlk_kde_CIDR
## How to save the most recently shown plots
# ggsave("xlk_kde_CIDR.pdf", height = 3, width = 4)
## Explore more
drawKDE("07/24/2006", xlp.r, CIDR=T)
drawKDE("07/24/2006", xlp.r, CIDR=F)
plot(y=subset(xlp.r, Date=="07/24/2006")$ret, x=1:length(subset(xlp.r, Date=="07/24/2006")$ret))
drawHistogram("07/24/2006", xlp.r, CIDR=F)
summary(subset(xlp.r, Date=="07/24/2006")$ret)
sum(subset(xlp.r, Date=="07/24/2006")$ret)
randDateData <-
ggplot(data=, aes(sample = ret)) +
stat_qq() + stat_qq_line()
randDateData <- subset(xlp.r, Date==random_date)
sum(subset(xlp.r, Date=="07/24/2006")$ret)
sectors["xlp"]
## Pick random days from xlp
set.seed(15)
random_date <- sample(xlp.r$Date, 1)
random_date
drawKDE(random_date, xlp.r, CIDR=F)
drawHistogram(random_date, xlp.r, CIDR=F)
randDateData <- subset(xlp.r, Date==random_date)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line()
random_date <- sample(xlp.r$Date, 1)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line()
random_date <- sample(xlp.r$Date, 1)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line()
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
random_date <- sample(xlp.r$Date, 1)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
random_date <- sample(xlp.r$Date, 1)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
var(randDateData$ret)
## Explore more
drawKDE("07/24/2006", xlp.r, CIDR=T)
random_date <- sample(xlp.r$Date, 1)
ggplot(data=randDateData, aes(sample =CIDR)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
drawKDE(random_date, xlp.r, CIDR=F)
drawHistogram(random_date, xlp.r, CIDR=F)
# CIDR
drawKDE(random_date, xlp.r, CIDR=T)
drawHistogram(random_date, xlp.r, CIDR=T)
randDateData <- subset(xlp.r, Date==random_date)
var(randDateData$CIDR)
ggplot(data=randDateData, aes(sample =CIDR)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
summary(subset(xlp.r, Date=="07/24/2006")$ret)
## Pick random days from xlr
set.seed(15)
random_date <- sample(xlr.r$Date, 1)
sectors[xlr]
sectors['xlr']
sectors['technologo']
sectors['technology']
sectors['xlk']
## Pick random days from xlk
set.seed(15)
random_date <- sample(xlk.r$Date, 1)
# Returns
drawKDE(random_date, xlk.r, CIDR=F)
drawHistogram(random_date, xlk.r, CIDR=F)
randDateData <- subset(xlk.r, Date==random_date)
var(randDateData$ret)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
# CIDR
drawKDE(random_date, xlk.r, CIDR=T)
drawHistogram(random_date, xlk.r, CIDR=T)
randDateData <- subset(xlk.r, Date==random_date)
var(randDateData$CIDR)
ggplot(data=randDateData, aes(sample =CIDR)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
random_date <- sample(xlk.r$Date, 1)
# Returns
drawKDE(random_date, xlk.r, CIDR=F)
drawHistogram(random_date, xlk.r, CIDR=F)
randDateData <- subset(xlk.r, Date==random_date)
var(randDateData$ret)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
# CIDR
drawKDE(random_date, xlk.r, CIDR=T)
drawHistogram(random_date, xlk.r, CIDR=T)
randDateData <- subset(xlk.r, Date==random_date)
var(randDateData$CIDR)
ggplot(data=randDateData, aes(sample =CIDR)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
random_date <- sample(xlk.r$Date, 1)
# Returns
drawKDE(random_date, xlk.r, CIDR=F)
drawHistogram(random_date, xlk.r, CIDR=F)
randDateData <- subset(xlk.r, Date==random_date)
var(randDateData$ret)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
# CIDR
drawKDE(random_date, xlk.r, CIDR=T)
drawHistogram(random_date, xlk.r, CIDR=T)
randDateData <- subset(xlk.r, Date==random_date)
var(randDateData$CIDR)
ggplot(data=randDateData, aes(sample =CIDR)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
# CIDR
drawKDE(random_date, xlk.r, CIDR=T)
drawHistogram(random_date, xlk.r, CIDR=T)
## Plots
random_date <- sample(xlk.r$Date, 1)
# draw histogram of returns
xlk_hist_returns <- drawHistogram(random_date, xlk.r, CIDR = F)
xlk_hist_returns
# draw kde of returns
xlk_kde_returns <- drawKDE(random_date, xlk.r, CIDR = F)
xlk_kde_returns
# draw histogram of CIDR
xlk_hist_CIDR <- drawHistogram(random_date, xlk.r)
xlk_hist_CIDR
# draw kde of CIDR
xlk_kde_CIDR <- drawKDE(random_date, xlk.r)
xlk_kde_CIDR
## Pick random days from xlk
set.seed(15)
random_date <- sample(xlk.r$Date, 1)
# Returns
drawKDE(random_date, xlk.r, CIDR=F)
drawHistogram(random_date, xlk.r, CIDR=F)
randDateData <- subset(xlk.r, Date==random_date)
var(randDateData$ret)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
# CIDR
drawKDE(random_date, xlk.r, CIDR=T)
drawHistogram(random_date, xlk.r, CIDR=T)
randDateData <- subset(xlk.r, Date==random_date)
var(randDateData$CIDR)
ggplot(data=randDateData, aes(sample =CIDR)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
random_date <- sample(xlp.r$Date, 1)
# Returns
drawKDE(random_date, xlp.r, CIDR=F)
drawHistogram(random_date, xlp.r, CIDR=F)
# Returns
drawKDE(random_date, xlk.r, CIDR=F)
drawHistogram(random_date, xlk.r, CIDR=F)
# Returns
drawKDE(random_date, xlp.r, CIDR=F)
drawHistogram(random_date, xlp.r, CIDR=F)
random_date <- sample(xlk.r$Date, 1)
# Returns
drawKDE(random_date, xlk.r, CIDR=F)
drawHistogram(random_date, xlk.r, CIDR=F)
random_date <- sample(xlp.r$Date, 1)
# Returns
drawKDE(random_date, xlp.r, CIDR=F)
drawHistogram(random_date, xlp.r, CIDR=F)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
sectors['xly']
## Pick random days from xly
set.seed(15)
random_date <- sample(xly.r$Date, 1)
# Returns
drawKDE(random_date, xly.r, CIDR=F)
drawHistogram(random_date, xly.r, CIDR=F)
randDateData <- subset(xly.r, Date==random_date)
var(randDateData$ret)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
# CIDR
drawKDE(random_date, xly.r, CIDR=T)
drawHistogram(random_date, xly.r, CIDR=T)
randDateData <- subset(xly.r, Date==random_date)
var(randDateData$CIDR)
ggplot(data=randDateData, aes(sample =CIDR)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
random_date <- sample(xly.r$Date, 1)
# Returns
drawKDE(random_date, xly.r, CIDR=F)
drawHistogram(random_date, xly.r, CIDR=F)
randDateData <- subset(xly.r, Date==random_date)
var(randDateData$ret)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
# CIDR
drawKDE(random_date, xly.r, CIDR=T)
drawHistogram(random_date, xly.r, CIDR=T)
randDateData <- subset(xly.r, Date==random_date)
random_date <- sample(xly.r$Date, 1)
randDateData <- subset(xly.r, Date==random_date)
# Returns
drawKDE(random_date, xly.r, CIDR=F)
drawHistogram(random_date, xly.r, CIDR=F)
var(randDateData$ret)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
random_date <- sample(xlk.r$Date, 1)
randDateData <- subset(xlk.r, Date==random_date)
# Returns
drawKDE(random_date, xlk.r, CIDR=F)
drawHistogram(random_date, xlk.r, CIDR=F)
var(randDateData$ret)
ggplot(data=randDateData, aes(sample = ret)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for Returns, ", random_date))
techPlot + geom_histogram(aes(CIDR), bins=500)
techPlot + stat_qq(aes(sample=CIDR)) + stat_qq_line(aes(sample=CIDR))
techPlot + stat_qq(aes(sample=CIDR), distribution = stats::qlnorm) + stat_qq_line(aes(sample=CIDR), distribution = stats::qlnorm)
techPlot + stat_qq(aes(sample=CIDR)) + stat_qq_line(aes(sample=CIDR))
sectors['xlp']
## Explore xlp more
staples <- xlp %>% mutate(Time = Time/100) %>% filter(Time %% 10 == 0)
staplesPlot <- ggplot(data=staples)
staplesPlot + geom_boxplot(aes(CIDR))
staplesPlot + geom_histogram(aes(CIDR), bins=500)
staplesPlot + stat_qq(aes(sample=CIDR)) + stat_qq_line(aes(sample=CIDR))
random_date <- sample(xlk.r$Date, 1)
randDateData <- subset(xlk.r, Date==random_date)
ggplot(data=randDateData, aes(sample=exp(CIDR))) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
random_date <- sample(xlk.r$Date, 1)
randDateData <- subset(xlk.r, Date==random_date)
ggplot(data=randDateData, aes(sample=exp(CIDR))) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
random_date <- sample(xlk.r$Date, 1)
randDateData <- subset(xlk.r, Date==random_date)
ggplot(data=randDateData, aes(sample=exp(CIDR))) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
ggplot(data=randDateData, aes(sample=CIDR)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
random_date <- sample(xlk.r$Date, 1)
randDateData <- subset(xlk.r, Date==random_date)
ggplot(data=randDateData, aes(sample=CIDR)) +
stat_qq() + stat_qq_line() +
labs(title=paste("Normal QQ Plot for CIDR, ", random_date))
staplesPlot + stat_qq(aes(sample=CIDR)) + stat_qq_line(aes(sample=log(CIDR)))
staplesPlot + stat_qq(aes(sample=CIDR)) + stat_qq_line(aes(sample=exp(CIDR)))
staplesPlot + stat_qq(aes(sample=ret)) + stat_qq_line(aes(sample=ret))
staplesPlot + stat_qq(aes(sample=CIDR)) + stat_qq_line(aes(sample=CIDR))
staplesPlot + stat_qq(aes(sample=CIDR)) + stat_qq_line(aes(sample=CIDR))
library(tidyverse)
library(ggplot2)
# Get data
setwd('C:/Users/lchco/OneDrive/Documents/School/CSU/Summer 2023/Week 1')
load("9ETFs.RData")
sectors <- c('xlb' = 'materials', 'xle' = 'energy', 'xlf' = 'financials',
'xli' = 'industrials', 'xlk' = 'technology', 'xlp' = 'consumer staples',
'xlu' = 'utilities', 'xlv' = 'health care', 'xly' = 'consumer discretionary')
## Technology sector explore with 10 minute returns
summary(xlk.r)
tech <- xlk %>% mutate(Time = Time/100) %>% filter(Time %% 10 == 0)
# Whole data set
techPlot <- ggplot(data=tech)
techPlot + geom_boxplot(aes(CIDR))
techPlot + geom_histogram(aes(CIDR), bins=500)
techPlot + stat_qq(aes(sample=CIDR)) + stat_qq_line(aes(sample=CIDR))
techPlot + geom_histogram(aes(CIDR), bins=500)
techPlot + geom_point(aes(x=1:length(CIDR), y=CIDR))
?setwd
# Load packages
library(tidyverse)
library(ggplot2)
# Get data
setwd('C:/Users/lchco/OneDrive/Documents/School/CSU/Summer 2023/change-point-finance')
load("9ETFs.RData")
sectors <- c('xlb' = 'materials', 'xle' = 'energy', 'xlf' = 'financials',
'xli' = 'industrials', 'xlk' = 'technology', 'xlp' = 'consumer staples',
'xlu' = 'utilities', 'xlv' = 'health care', 'xly' = 'consumer discretionary')
