sum(12*2**c(0:13))
10!/6!
factorial(10)/factorial(6)
10*9*8*7
5*9*8*7
5*5*8*7
6*5*4
5*4*3
10*9*8
factorial(6)
factorial(4)*2
factorial(5)*2
factorial(5)
choose(7, 3)
choose(7,4)
coose(100,100)
choose(100,100)
1.63/(.111-.052)
nsim <- 1000
lambda <- 3
n <- 20
MLE <- rep(0, nsim)
for (i in 1:nsim) {
sample <- rpois(n, lambda)
MLE[i] = sum(sample)/n
}
meanLambda <- mean(MLE)
varLambda <- var(MLE)
library(ggplot2)
MLEdf <- data.frame(y=(MLE-lambda)/(lambda/n))
ggplot(MLEdf, aes(sample=y)) +
geom_qq_line() +
geom_qq() +
labs(title="QQ plot for Standardized MLE of lambda (n=20)")
nsim <- 1000
lambda <- 3
n <- 50
MLE <- rep(0, nsim)
for (i in 1:nsim) {
sample <- rpois(n, lambda)
MLE[i] = sum(sample)/n
}
meanLambda <- mean(MLE)
varLambda <- var(MLE)
library(ggplot2)
MLEdf <- data.frame(y=(MLE-lambda)/(lambda/n))
ggplot(MLEdf, aes(sample=y)) +
geom_qq_line() +
geom_qq() +
labs(title="QQ plot for Standardized MLE of lambda (n=50)")
nsim <- 1000
mu <- 1
sigmasq <- 2
n <- 20
MLEmu <- rep(0, nsim)
MLEsigmasq <- rep(0, nsim)
for (i in 1:nsim) {
sample <- rnorm(n, mu, sqrt(sigmasq))
MLEmu[i] <- mean(sample)
MLEsigmasq[i] <- sum((sample - MLEmu[i])**2)/n
}
theta <- data.frame(mu=MLEmu, sigmasq=MLEsigmasq)
avgMLEmu <- mean(MLEmu)
avgMLEsigmasq <- mean(MLEsigmasq)
covariance <- cov(theta)
library(tidyverse)
library(knitr)
nsim <- 1000
mu <- 1
sigmasq <- 2
n <- 20
MLEmu <- rep(0, nsim)
MLEsigmasq <- rep(0, nsim)
for (i in 1:nsim) {
sample <- rnorm(n, mu, sqrt(sigmasq))
MLEmu[i] <- mean(sample)
MLEsigmasq[i] <- sum((sample - MLEmu[i])**2)/n
}
theta <- data.frame(mu=MLEmu, sigmasq=MLEsigmasq)
avgMLEmu <- mean(MLEmu)
avgMLEsigmasq <- mean(MLEsigmasq)
covariance <- cov(theta)
avgMLEsigmasq/n
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(RMySQL)
library(tidyverse)
library(knitr)
library(kableExtra)
library(cowplot)
# Connect to database
health <- dbConnect(MySQL(),
db='health',
host='localhost',
user='root',
password='l4mlnMySQL')
# Get glucose data
rs <- dbSendQuery(health, 'SELECT * FROM glucose;')
glucose <- fetch(rs, n=-1)
glucose <- glucose %>% mutate(reading_date=as.Date(reading_date))
# Get training data
rs <- dbSendQuery(health, 'SELECT * FROM training;')
training <- fetch(rs, n=-1)
training <- training %>% mutate(log_date=as.Date(log_date))
# Get lookup tables
rs <- dbSendQuery(health, 'SELECT * FROM l_training_focus;')
l_highest_vol <- fetch(rs, n=-1)
getHVolume <- l_highest_vol$training_focus
names(getHVolume) <- l_highest_vol$training_focus_id
rs <- dbSendQuery(health, 'SELECT * FROM l_injury_status;')
l_injury_status <- fetch(rs, n=-1)
getInjuryStatus <- l_injury_status$injury_status
names(getInjuryStatus) <- l_injury_status$injury_status_id
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(RMySQL)
library(tidyverse)
library(knitr)
library(kableExtra)
library(cowplot)
# Connect to database
health <- dbConnect(MySQL(),
db='health',
host='localhost',
user='root',
password='l4mlnMySQL')
# Get glucose data
rs <- dbSendQuery(health, 'SELECT * FROM glucose;')
glucose <- fetch(rs, n=-1)
glucose <- glucose %>% mutate(reading_date=as.Date(reading_date))
# Get training data
rs <- dbSendQuery(health, 'SELECT * FROM training;')
training <- fetch(rs, n=-1)
training <- training %>% mutate(log_date=as.Date(log_date))
# Get lookup tables
rs <- dbSendQuery(health, 'SELECT * FROM l_training_focus;')
l_highest_vol <- fetch(rs, n=-1)
getHVolume <- l_highest_vol$training_focus
names(getHVolume) <- l_highest_vol$training_focus_id
rs <- dbSendQuery(health, 'SELECT * FROM l_injury_status;')
l_injury_status <- fetch(rs, n=-1)
getInjuryStatus <- l_injury_status$injury_status
names(getInjuryStatus) <- l_injury_status$injury_status_id
-0.9157+0.0052*(50)+0.0058*(182)+0.0122*(36)
exp(0.8391)
2.3143/(1+2.3143)
150/(150+442)
150/(150+58)
150/(150+118)
442/(442+58)
150/(150+118)
load("9ETFs.RData")
# Load packages
library(tidyverse)
library(ggplot2)
# Get data
setwd('C:/Users/lchco/OneDrive/Documents/School/CSU/Summer 2023/change-point-finance')
load("9ETFs.RData")
sectors <- c('xlb' = 'materials', 'xle' = 'energy', 'xlf' = 'financials',
'xli' = 'industrials', 'xlk' = 'technology', 'xlp' = 'consumer staples',
'xlu' = 'utilities', 'xlv' = 'health care', 'xly' = 'consumer discretionary')
# helper functions
getReturns <- function(df) {
returns <- rep(0, dim(df)[1])
for (i in 2:dim(df)[1]) {
returns[i] <- (df$close[i] - df$close[i-1])/df$close[i-1]
}
df$computedRet <- returns
return(df)
}
# Pick a time frame to test for a change (06/20/2011 - 10/24/2011)
sector.df <- list(xlb.r, xle.r, xlf.r, xli.r, xlk.r, xlp.r, xlu.r, xlv.r, xly.r)
# Get data
setwd('C:/Users/lchco/OneDrive/Documents/School/CSU/Summer 2023/change-point-finance')
# Get data
setwd('C:/Users/lchco/OneDrive/Documents/School/CSU/Summer_2023/change-point-finance')
load("9ETFs.RData")
sectors <- c('xlb' = 'materials', 'xle' = 'energy', 'xlf' = 'financials',
'xli' = 'industrials', 'xlk' = 'technology', 'xlp' = 'consumer staples',
'xlu' = 'utilities', 'xlv' = 'health care', 'xly' = 'consumer discretionary')
# helper functions
getReturns <- function(df) {
returns <- rep(0, dim(df)[1])
for (i in 2:dim(df)[1]) {
returns[i] <- (df$close[i] - df$close[i-1])/df$close[i-1]
}
df$computedRet <- returns
return(df)
}
# Pick a time frame to test for a change (06/20/2011 - 10/24/2011)
sector.df <- list(xlb.r, xle.r, xlf.r, xli.r, xlk.r, xlp.r, xlu.r, xlv.r, xly.r)
sector.df <- lapply(sector.df, getReturns)
sector.df <-
lapply(sector.df, function(x) {
mutate(x, Date = as.Date(Date, "%m/%d/%Y"))
})
sector.df.timeFrame <-
lapply(sector.df, function(x) {
filter(x, Date > as.Date("06/20/2011", "%m/%d/%Y"),
Date < as.Date("10/24/2011", "%m/%d/%Y")
)
})
tradingDays <- as.character(as.factor(sector.df.timeFrame[[1]]$Date))
tradingDays <- as.factor(sector.df.timeFrame[[1]]$Date)
tradingDays <- list(as.factor(sector.df.timeFrame[[1]]$Date))
tradingDays <- unique(sector.df.timeFrame[[1]]$Date)
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == as.Date(dateString, "%m%d%Y")) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
print(dim(df))
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
lapply(sector.df.timeFrame, kdeVector, dateString=day, CIDR=F)
lapply(sector.df.timeFrame, kdeVector, dateString=tradingDays[1], CIDR=F)
sector.df.timeFrame[[5]]
f_t <- rep(0, length(tradingDays))
f_t <- rep(0, length(tradingDays))
for (i in 1:length(tradingDays)) {
f_t[i] <- lapply(sector.df, kdeVector, dateString=tradingDays[i], CIDR=F)
}
?cusum
?cumsum
f_t[1]
# Vector concatenation
f_t <- rep(0, length(tradingDays)*9)
for (i in 1:length(tradingDays)) {
f_t[i] <- lapply(sector.df, kdeVector, dateString=tradingDays[i], CIDR=F)
}
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == as.Date(dateString, "%m%d%Y")) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
lapply(sector.df, kdeVector, dateString=tradingDays[1], CIDR=F)
test <- lapply(sector.df, kdeVector, dateString=tradingDays[1], CIDR=F)
# Vector concatenation
f_t <- rep(0, length(tradingDays))
for (i in 1:length(tradingDays)) {
f_t[[i]] <- lapply(sector.df, kdeVector, dateString=tradingDays[i], CIDR=F)
}
# Vector concatenation
f_t <- rep(rep(0, 9), length(tradingDays))
# Vector concatenation
f_t <- rep([rep(0, 9)], length(tradingDays))
# Vector concatenation
f_t <- rep([], length(tradingDays))
# Vector concatenation
f_t <- list(rep(0, length(tradingDays)))
?list
# Vector concatenation
f_t <- c(rep(0, length(tradingDays)))
# Vector concatenation
f_t <- rep(list(c(0,0,0,0,0,0,0,0,0)), length(tradingDays))
for (i in 1:length(tradingDays)) {
f_t[i] <- lapply(sector.df, kdeVector, dateString=tradingDays[i], CIDR=F)
}
cumsum(test[[1]])
# Vector concatenation
f_t <- rep(list(c(0,0,0,0,0,0,0,0,0)), length(tradingDays))
f_t[1]
f_t[1][1]
f_t[[1]]
f_t[[1]][1]
# Vector concatenation
f_t <- rep(list(c(0,0,0,0,0,0,0,0,0)), length(tradingDays))
for (i in 1:length(tradingDays)) {
t <- lapply(sector.df, kdeVector, dateString=tradingDays[i], CIDR=F)
for (j in 1:9) f_t[[i]][j] <- t[j]
}
f_t[[1]]
sectors[2]
# A is a subset of sectors (indexed from 1-9), t is the stopping point of the sum
partialSum <- rep(0, 9)
# partial sum process
PS <- function(t, A) {
# A is a list of ints representing a subset of sectors (indexed from 1-9)
# t is the stopping point of the sum
partialSum <- rep(0, 9)
for (s in A) {
for (i in 1:t) {
partialSum[s] <- partialSum[s] + sum(f_t[[i]][s])
}
}
return(partialSum)
}
# partial sum process
PS <- function(t, A, f_t) {
# A is a list of ints representing a subset of sectors (indexed from 1-9)
# t is the stopping point of the sum
partialSum <- rep(0, 9)
for (s in A) {
for (i in 1:t) {
partialSum[s] <- partialSum[s] + sum(f_t[[i]][s])
}
}
return(partialSum)
}
PS(2, c(1, 2, 3), f_t = f_t)
f_t[[1]][1]
sum(f_t[[1]][1])
f_t[[1]][[1]]
sum(f_t[[1]][[1]])
# partial sum process
PS <- function(t, A, f_t) {
# A is a list of ints representing a subset of sectors (indexed from 1-9)
# t is the stopping point of the sum
partialSum <- rep(0, 9)
for (s in A) {
for (i in 1:t) {
partialSum[s] <- partialSum[s] + sum(f_t[[i]][[s]])
}
}
return(partialSum)
}
PS(2, c(1, 2, 3), f_t = f_t)
# function for vector concatenation
concatVectors <- function(startDate, endDate, sector.dfs, cidr=F) {
sector.df.timeFrame <-
lapply(sector.dfs, function(x) {
filter(x, Date > as.Date(startDate, "%m/%d/%Y"),
Date < as.Date(endDate, "%m/%d/%Y")
)
})
tradingDays <- unique(sector.df.timeFrame[[1]]$Date)
f_t <- rep(list(c(0,0,0,0,0,0,0,0,0)), length(tradingDays))
for (i in 1:length(tradingDays)) {
t <- lapply(sector.df.timeFrame, kdeVector, dateString=tradingDays[i], CIDR=cidr)
for (j in 1:9) f_t[[i]][j] <- t[j]
}
return(f_t)
}
f_t <- concatVectors("06/20/2011", "10/24/2011", sector.df)
length(f_t)
?sapply
PS(5, c(1:9), f_t = f_t)
PS(5, c(1:9)) - 5/length(f_t) * PS(length(f_t), c(1:9))
PS(5, c(1:9), f_t) - 5/length(f_t) * PS(length(f_t), c(1:9), f_t)
# function for cusum
cusum <- function(A, f_t) {
cu <- 1/(50*length(A)*length(f_t)) * sum(sapply(1:length(f_t), function(x) {
result <- 0
for (vn in (PS(x, A) - x/length(f_t) * PS(length(f_t), A))) result <- result + vn**2
return(result)
}))
return(cu)
}
cusum(c(1:9), f_t = f_t)
# function for cusum
cusum <- function(A, f_t) {
cu <- 1/(50*length(A)*length(f_t)) * sum(sapply(1:length(f_t), function(x) {
result <- 0
for (vn in (PS(x, A, f_t) - x/length(f_t) * PS(length(f_t), A, f_t))) result <- result + vn**2
return(result)
}))
return(cu)
}
cusum(c(1:9), f_t = f_t)
sample(xlv.r$Date, 3)
# function to return a list of all sector data frames with returns and formatted dates
getSectorDfList <- function() {
sector.df <- list(xlb.r, xle.r, xlf.r, xli.r, xlk.r, xlp.r, xlu.r, xlv.r, xly.r)
sector.df <- lapply(sector.df, getReturns)
sector.df <-
lapply(sector.df, function(x) {
mutate(x, Date = as.Date(Date, "%m/%d/%Y"))
})
return(sector.df)
}
# Load packages
library(tidyverse)
library(ggplot2)
# Get data
setwd('C:/Users/lchco/OneDrive/Documents/School/CSU/Summer_2023/change-point-finance')
load("9ETFs.RData")
sectors <- c('xlb' = 'materials', 'xle' = 'energy', 'xlf' = 'financials',
'xli' = 'industrials', 'xlk' = 'technology', 'xlp' = 'consumer staples',
'xlu' = 'utilities', 'xlv' = 'health care', 'xly' = 'consumer discretionary')
# helper functions
getReturns <- function(df) {
returns <- rep(0, dim(df)[1])
for (i in 2:dim(df)[1]) {
returns[i] <- (df$close[i] - df$close[i-1])/df$close[i-1]
}
df$computedRet <- returns
return(df)
}
# function to return a list of all sector data frames with returns and formatted dates
getSectorDfList <- function() {
sector.df <- list(xlb.r, xle.r, xlf.r, xli.r, xlk.r, xlp.r, xlu.r, xlv.r, xly.r)
sector.df <- lapply(sector.df, getReturns)
sector.df <-
lapply(sector.df, function(x) {
mutate(x, Date = as.Date(Date, "%m/%d/%Y"))
})
return(sector.df)
}
# function to return vectorized kdes updated
kdeVector <- function(dateString, sectorDF, CIDR=T) {
df <- sectorDF %>%
filter(Date == as.Date(dateString, "%m%d%Y")) %>%
mutate(Time = as.character(Time)) %>%
filter(substr(Time, nchar(Time), nchar(Time)) == "0")
if (CIDR) {
kd <- density(df$CIDR)
pointsOnSupport <- seq(-0.04, 0.04, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
else {
kd <- density(df$computedRet)
pointsOnSupport <- seq(-0.001, 0.001, length.out=50)
vectorKDE <- rep(0, 50)
for (i in 1:50) vectorKDE[i] <- kd$y[which.min(abs(kd$x - pointsOnSupport[i]))]
}
return(vectorKDE)
}
# function for vector concatenation
concatVectors <- function(startDate, endDate, sector.dfs, cidr=F) {
sector.df.timeFrame <-
lapply(sector.dfs, function(x) {
filter(x, Date > as.Date(startDate, "%m/%d/%Y"),
Date < as.Date(endDate, "%m/%d/%Y")
)
})
tradingDays <- unique(sector.df.timeFrame[[1]]$Date)
f_t <- rep(list(c(0,0,0,0,0,0,0,0,0)), length(tradingDays))
for (i in 1:length(tradingDays)) {
t <- lapply(sector.df.timeFrame, kdeVector, dateString=tradingDays[i], CIDR=cidr)
for (j in 1:9) f_t[[i]][j] <- t[j]
}
return(f_t)
}
# function for partial sum process
PS <- function(t, A, f_t) {
# A is a list of ints representing a subset of sectors (indexed from 1-9)
# t is the stopping point of the sum
partialSum <- rep(0, 9)
for (s in A) {
for (i in 1:t) {
partialSum[s] <- partialSum[s] + sum(f_t[[i]][[s]])
}
}
return(partialSum)
}
# function for cusum
cusum <- function(A, f_t) {
cu <- 1/(50*length(A)*length(f_t)) * sum(sapply(1:length(f_t), function(x) {
result <- 0
for (vn in (PS(x, A, f_t) - x/length(f_t) * PS(length(f_t), A, f_t))) result <- result + vn**2
return(result)
}))
return(cu)
}
sector.df.list <- getSectorDfList()
f_t <- concatVectors("01/23/2006", "02/24/2006", sector.df.list)
cusum(c(1:9), f_t)
## Test functions
sector.df.list <- getSectorDfList()
f_t <- concatVectors("01/23/2006", "02/24/2006", sector.df.list)
cusum(c(1:9), f_t)
# function for cusum
cusum <- function(A, f_t) {
cu <- 1/(50*length(A)*length(f_t)**2) * sum(sapply(1:length(f_t), function(x) {
result <- 0
for (vn in (PS(x, A, f_t) - x/length(f_t) * PS(length(f_t), A, f_t))) result <- result + vn**2
return(result)
}))
return(cu)
}
cusum(c(1:9), f_t)
sample(xlv.r$Date, 2)
f_t <- concatVectors("07/21/2009", "09/10/2009", sector.df.list)
cusum(c(1:9), f_t)
utils::getSrcDirectory(function(){})
utils::getSrcDirectory(function(){})[1]
dirname(parent.frame(2)$ofile)
library(rstudioapi)
rstudioapi::getActiveDocumentContext()$path
dirname(rstudioapi::getActiveDocumentContext()$path)
install.packages("rstudioapi")
install.packages("rstudioapi")
dirname(getActiveDocumentContext()$path)
